#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Webcamod, Show and take Photos with your webcam.
# Copyright (C) 2011  Gonzalo Exequiel Pedone
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with This program. If not, see <http://www.gnu.org/licenses/>.
#
# Email   : hipersayan.x@gmail.com
# Web-Site: http://hipersayanx.blogspot.com/

from PyQt4 import QtCore, QtGui, uic
from PyKDE4 import plasmascript
from PyKDE4.plasma import Plasma
from PyKDE4.kdeui import KIcon, KDialog, KNotification
from PyKDE4.kdecore import KConfigGroup
import v4l2tools
import config

class Webcamoid(plasmascript.Applet):
    def __init__(self, parent, args=None):
        plasmascript.Applet.__init__(self, parent)

    def init(self):
        self.tools = v4l2tools.V4L2Tools(self, True)
        self.tools.devicesModified.connect(self.updateWebcams)
        self.setHasConfigurationInterface(True)
        self.setAspectRatioMode(Plasma.IgnoreAspectRatio)
        self.resize(320, 240)
        self.setMinimumSize(128, 96)

        self.tools.setFFmpegExecutable(str(self.config().readEntry('ffmpegExecutable', 'ffmpeg').toString()))

        buttonSize = QtCore.QSizeF(24, 24)

        self.glyControls = QtGui.QGraphicsGridLayout(self.applet)
        self.applet.setLayout(self.glyControls)

        self.vspControls = QtGui.QGraphicsWidget(self.applet)
        self.vspControls.setSizePolicy(QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.MinimumExpanding))
        self.glyControls.addItem(self.vspControls, 0, 0, 1, 3)

        self.hspControlsLeft = QtGui.QGraphicsWidget(self.applet)
        self.hspControlsLeft.setSizePolicy(QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum, QtGui.QSizePolicy.Preferred))
        self.glyControls.addItem(self.hspControlsLeft, 1, 0, 1, 1)

        self.btnTakePhoto = Plasma.PushButton(self.applet)
        self.btnTakePhoto.setIcon(KIcon('camera-photo'))
        self.btnTakePhoto.setMinimumSize(buttonSize)
        self.btnTakePhoto.setMaximumSize(buttonSize)
        self.btnTakePhoto.clicked.connect(self.takePhoto)
        self.btnTakePhoto.hide()
        self.btnTakePhoto.setEnabled(False)
        self.glyControls.addItem(self.btnTakePhoto, 1, 1, 1, 1)

        self.cbxSetWebcam = Plasma.ComboBox(self.applet)
        self.cbxSetWebcam.setMinimumSize(buttonSize)
        self.cbxSetWebcam.setMaximumSize(self.cbxSetWebcam.maximumSize().width(), buttonSize.height())

        for webcam in self.tools.captureDevices():
            self.cbxSetWebcam.addItem(webcam[1])

        self.cbxSetWebcam.currentIndexChanged.connect(self.setWebcam)
        self.cbxSetWebcam.hide()
        self.glyControls.addItem(self.cbxSetWebcam, 1, 2, 1, 1)

        self.btnStartStop = Plasma.PushButton(self.applet)
        self.btnStartStop.setIcon(KIcon('media-playback-start'))
        self.btnStartStop.setMinimumSize(buttonSize)
        self.btnStartStop.setMaximumSize(buttonSize)
        self.btnStartStop.clicked.connect(self.startStop)
        self.btnStartStop.hide()
        self.glyControls.addItem(self.btnStartStop, 1, 3, 1, 1)

        self.hspControlsRight = QtGui.QGraphicsWidget(self.applet)
        self.hspControlsRight.setSizePolicy(QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum, QtGui.QSizePolicy.Preferred))
        self.glyControls.addItem(self.hspControlsRight, 1, 4, 1, 1)

        self.webcamFrame = QtGui.QImage()

        self.timer = QtCore.QTimer(self)
        self.timer.setInterval(1)
        self.timer.timeout.connect(self.showFrame)

    def hoverMoveEvent(self, event):
        self.btnTakePhoto.show()
        self.cbxSetWebcam.show()
        self.btnStartStop.show()

    def hoverLeaveEvent(self, event):
        self.btnTakePhoto.hide()
        self.cbxSetWebcam.hide()
        self.btnStartStop.hide()

    @QtCore.pyqtSlot()
    def showFrame(self):
        if self.timer.isActive():
            self.webcamFrame = self.tools.readFrame()
            self.update()

    @QtCore.pyqtSlot()
    def updateWebcams(self):
        oldDevice = self.tools.currentDevice()
        timer_isActive = self.timer.isActive()
        self.tools.stopCurrentDevice()
        self.btnTakePhoto.setEnabled(False)
        self.btnStartStop.setIcon(KIcon('media-playback-start'))
        self.timer.stop()
        self.webcamFrame = QtGui.QImage(1, 1, QtGui.QImage.Format_RGB888)
        self.webcamFrame.fill(0)
        self.update()
        self.cbxSetWebcam.clear()
        webcams = self.tools.captureDevices()
        dev_names = [device[0] for device in webcams]

        for webcam in webcams:
            self.cbxSetWebcam.addItem(webcam[1])

        if oldDevice in dev_names and timer_isActive:
            if self.tools.startDevice(oldDevice):
                self.btnTakePhoto.setEnabled(True)
                self.btnStartStop.setIcon(KIcon('media-playback-stop'))
                self.timer.start()
            else:
                self.showFFmpegError()

    @QtCore.pyqtSlot()
    def takePhoto(self):
        image = QtGui.QImage(self.webcamFrame)
        filename = self.saveFile()

        if filename != '':
            image.save(filename)

    @QtCore.pyqtSlot(int)
    def setWebcam(self, index):
        if self.timer.isActive():
            if not self.tools.startDevice(self.tools.captureDevices()[index][0]):
                self.showFFmpegError()

    @QtCore.pyqtSlot()
    def startStop(self):
        if self.timer.isActive():
            self.tools.stopCurrentDevice()
            self.btnTakePhoto.setEnabled(False)
            self.btnStartStop.setIcon(KIcon('media-playback-start'))
            self.timer.stop()
            self.webcamFrame = QtGui.QImage(1, 1, QtGui.QImage.Format_RGB888)
            self.webcamFrame.fill(0)
            self.update()
        else:
            if self.tools.startDevice(self.tools.captureDevices()[self.cbxSetWebcam.currentIndex()][0]):
                self.btnTakePhoto.setEnabled(True)
                self.btnStartStop.setIcon(KIcon('media-playback-stop'))
                self.timer.start()
            else:
                self.showFFmpegError()

    def showFFmpegError(self):
        KNotification.event(KNotification.Error,
                            'FFmpeg not installed or configured',
                            'Please install FFmpeg:\n'
                            '\n'
                            '<strong>Arch/Chakra</strong>: pacman -S ffmpeg\n'
                            '<strong>Debian/Ubuntu</strong>: apt-get install ffmpeg\n'
                            '<strong>Fedora</strong>: yum install ffmpeg\n'
                            '<strong>OpenSuSE</strong>: zypper install ffmpeg\n'
                            '<strong>Mandriva</strong>: urpmi ffmpeg\n'
                            '<strong>Pardus</strong>: pisi it ffmpeg',
                            QtGui.QPixmap(),
                            None,
                            KNotification.Persistent)

    def saveFile(self):
        filters = 'PNG file (*.png);;JPEG file (*.jpg);;BMP file (*.bmp);;GIF file (*.gif)'
        saveFileDialog = QtGui.QFileDialog(None, 'Save Image As...', './image.png', filters)
        saveFileDialog.setModal(True)
        saveFileDialog.setDefaultSuffix('png')
        saveFileDialog.setFileMode(QtGui.QFileDialog.AnyFile)
        saveFileDialog.setAcceptMode(QtGui.QFileDialog.AcceptSave)
        saveFileDialog.exec_()

        selected_files = saveFileDialog.selectedFiles()

        return '' if selected_files.isEmpty() else selected_files[0]

    def paintInterface(self, painter, option, rect):
        painter.save()

        if not self.webcamFrame.isNull():
            imageScaled = self.webcamFrame.scaled(rect.width(), rect.height(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)
            painter.drawImage(rect.x() + (rect.width() - imageScaled.width()) / 2, rect.y() + (rect.height() - imageScaled.height()) / 2, imageScaled)

        painter.restore()

    def createConfigurationInterface(self, parent):
        parent.setButtons(KDialog.ButtonCode(KDialog.Ok | KDialog.Cancel))
        self.cfgDialog = config.Config(self, self.tools)
        parent.addPage(self.cfgDialog, 'Webcam Settings',  'camera-web', 'Set Webcam Properties',  False)

        parent.okClicked.connect(self.saveConfigs)
        parent.cancelClicked.connect(self.saveConfigs)

    @QtCore.pyqtSlot()
    def saveConfigs(self):
        self.config().writeEntry('ffmpegExecutable', self.tools.ffmpegExecutable())
        self.emit(QtCore.SIGNAL("configNeedsSaving()"))

def CreateApplet(parent):
    return Webcamoid(parent)
